<?xml version='1.0' encoding='utf-8' ?>
<iCalendar xmlns:pentabarf='http://pentabarf.org' xmlns:xCal='urn:ietf:params:xml:ns:xcal'>
    <vcalendar>
        <version>2.0</version>
        <prodid>-//Pentabarf//Schedule//EN</prodid>
        <x-wr-caldesc></x-wr-caldesc>
        <x-wr-calname></x-wr-calname>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>UKB8YC@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-UKB8YC</pentabarf:event-slug>
            <pentabarf:title>Welcome Session</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220921T090000</dtstart>
            <dtend>20220921T091500</dtend>
            <duration>0.01500</duration>
            <summary>Welcome Session</summary>
            <description>Video: https://youtu.be/0kOLsFQGxyk</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Other</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/UKB8YC/</url>
            <location>Auditorium</location>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>TKE3E3@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-TKE3E3</pentabarf:event-slug>
            <pentabarf:title>Keynote: Improving Contributor Experience &amp; Broadening Contributor Scope</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220921T091500</dtstart>
            <dtend>20220921T101500</dtend>
            <duration>1.00000</duration>
            <summary>Keynote: Improving Contributor Experience &amp; Broadening Contributor Scope</summary>
            <description>As a largely volunteer-driven community, the Django code base and community rely on their contributors. In this talk I&#x27;ll focus on two different categories of contributors the Django community needs:
- Code Contributors
- Non-Code Contributors

The first part of the talk will propose a new category of code contributor: _Code Contributor Mentors_. These contributors are meant to provide an intermediate layer of support. They would benefit both current project maintainers (who are often overworked volunteers) and potential new contributors (who are often overwhelmed with how/where to start or continue).

The second part of the talk will focus on the often-overlooked need for non-code contributors. Django (as well as Python and other related projects) are large enough that they need contributions beyond code.  These contributions range from needs on the global level, on the DSF &amp; PSF boards, to local meetups &amp; conferences. But these needs are often overlooked since they&#x27;re not code-related.

The goal of the talk is to both raise awareness of issues, but also propose potential solutions.

Video: https://youtu.be/tfRcEFIWmUA</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Keynote</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/TKE3E3/</url>
            <location>Auditorium</location>
            
            <attendee>Kojo Idrissa</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>DVCGPD@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-DVCGPD</pentabarf:event-slug>
            <pentabarf:title>Hidden gems of Django Admin. Part 1.</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220921T101500</dtstart>
            <dtend>20220921T104500</dtend>
            <duration>0.03000</duration>
            <summary>Hidden gems of Django Admin. Part 1.</summary>
            <description>The Django Admin Panel is a complex and bad-documented tool in the Django that can greatly speed up development if you start to understand it.

- &quot;Isn&#x27;t it easier for us to write our Backend?&quot;
I will answer: “No, it’s not easier!”.
Seven years of insights and discoveries in my report.

The following questions should be in this conversation:
1. Django admin panel as it could be.
2. Django admin sites multiplication.
2. ModelAdmin, How to remove the legacy of older versions of Django.
4. AdminActions based on Generic-CBV, simplicity and convenience.
5. Undocumented Django.contrib.admin features.
6. Using Django Admin Panel for third-party Backend implementations.

The next part of this series of talks will take place at Django Con US 2022. For advanced and experienced developers.

Video: https://youtu.be/HJfPkbzcCJQ</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/DVCGPD/</url>
            <location>Auditorium</location>
            
            <attendee>Maxim Danilov</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>RNGQXV@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-RNGQXV</pentabarf:event-slug>
            <pentabarf:title>Experimenting with file-based routing in Django</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220921T111500</dtstart>
            <dtend>20220921T114500</dtend>
            <duration>0.03000</duration>
            <summary>Experimenting with file-based routing in Django</summary>
            <description>File-system based routing has been widely used in JavaScript web frameworks
such as [Next.js][nextjs], [NuxtJS][nuxtjs], [Remix][remix], [Gatsby][gatsby], and [SvelteKit][sveltekit].
It works by scanning the files in a specific directory (e.g. `pages`) and mapping the
default export of each file to a URL route in the web application.  This means that each
URL path corresponds to a single view file under the same path in your codebase.

Meanwhile, in Django, URL routes are traditionally defined in a `urls.py` file in the
project directory. You can separate the `urls.py` into multiple different files and use
`include()` to bring them all together. However, you still have to explicitly define each
path and the view it corresponds to.

In this talk, we&#x27;ll explore how we can implement file-based routing in a Django project to
automatically generate URL paths based on your file structure, as well as the challenges
that come with it.

The talk will be structured as follows:
- What file-system based routing is and why it can be useful
- How it works in other web frameworks
- How it may work in Django
- How it can be implemented
- What challenges we&#x27;ll face and how to overcome them
- What possible improvements and new ideas we can bring
- How you can use it in your project

Resources:
- [Slides][slides]
- [Repository][repository]

[nextjs]: https://nextjs.org/docs/routing/introduction
[nuxtjs]: https://nuxtjs.org/docs/features/file-system-routing/
[remix]: https://remix.run/docs/en/v1/guides/routing
[gatsby]: https://www.gatsbyjs.com/docs/reference/routing/file-system-route-api/
[sveltekit]: https://kit.svelte.dev/docs/routing
[slides]: https://slides.laymonage.com/fs-paths
[repository]: https://github.com/laymonage/django-fs-paths

Video: https://youtu.be/_2VZ9AOXblY</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/RNGQXV/</url>
            <location>Auditorium</location>
            
            <attendee>Sage Abdullah</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>TKBMTH@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-TKBMTH</pentabarf:event-slug>
            <pentabarf:title>Add Multi-Factor Authentication (MFA) to Django in Mere Minutes</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220921T115000</dtstart>
            <dtend>20220921T122000</dtend>
            <duration>0.03000</duration>
            <summary>Add Multi-Factor Authentication (MFA) to Django in Mere Minutes</summary>
            <description>Passwords alone can’t protect us. Can’t protect our bank accounts or medical records — our most sensitive data.

We need multi-factor authentication, which doesn’t come with Django out of the box. But we can add MFA to our Django projects in just a few minutes, giving users the ability to add multiple factors in addition to their password:

* time-based one-time passwords (TOTP)
* hardware security keys, including Touch ID (WebAuthn)
* backup emergency codes

Among the MFA options available for Django include [Kagi](https://github.com/justinmayer/kagi), an open-source project that builds upon the work that a team of security professionals undertook to add multi-factor authentication to the Python Package Index (PyPI).

Attendees of this talk will take home the following knowledge and skills:

* why multi-factor authentication is so important
* steps needed to add MFA to a Django project
* how to customize templates for MFA-related views
* adding TOTP to a phone for easy logins on-the-go
* how to use Touch ID as second factor
* browser vendor plans for logins without passwords

Video: https://youtu.be/aannTf_z1XU</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/TKBMTH/</url>
            <location>Auditorium</location>
            
            <attendee>Justin Mayer</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>FAZTAT@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-FAZTAT</pentabarf:event-slug>
            <pentabarf:title>Introducing Django Ninja</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220921T122500</dtstart>
            <dtend>20220921T125500</dtend>
            <duration>0.03000</duration>
            <summary>Introducing Django Ninja</summary>
            <description>I&#x27;m the author of Django Ninja - a framework for creating REST APIs built on top of Django.

The core feature is a type-hints based API’s declaration that automatically generates OpenAPI/swagger documentation.

While being simple it gives high performance both on single thread parsing and in hight concurrent load thanks to async support.

It is new, but already used in production by multiple companies.
During the talk I will walk you through a demo and show you all primary features.

Video: https://youtu.be/zpR1QCLBpIA</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/FAZTAT/</url>
            <location>Auditorium</location>
            
            <attendee>Vitaliy Kucheryaviy</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>ST9NLK@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-ST9NLK</pentabarf:event-slug>
            <pentabarf:title>Keynote: Scaling from One to Billions</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220921T140000</dtstart>
            <dtend>20220921T150000</dtend>
            <duration>1.00000</duration>
            <summary>Keynote: Scaling from One to Billions</summary>
            <description>Video: https://youtu.be/EHedUWYkSwA</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Keynote</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/ST9NLK/</url>
            <location>Auditorium</location>
            
            <attendee>Daniel Roy Greenfeld</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>GZDHYB@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-GZDHYB</pentabarf:event-slug>
            <pentabarf:title>Deep Inside Django&#x27;s ORM: How Django Builds Queries</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220921T150000</dtstart>
            <dtend>20220921T153000</dtend>
            <duration>0.03000</duration>
            <summary>Deep Inside Django&#x27;s ORM: How Django Builds Queries</summary>
            <description>In this talk, we will have a deeper look at the fundamentals of Django&#x27;s ORM.

The first part is about Query objects (`django.db.models.sql.query.Query`) and how Django uses them to map QuerySets to SQL. In this part, we will also see how Expressions (from `django.db.models.expressions`) work, how related fields are managed by Django internally, and how aggregate functions are handled.

The second part of the talk provides some creative ways to leverage these insights in real-world projects to customize queries, build dynamic queries and improve performance.

Video: https://youtu.be/OEN5wONsaYU</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/GZDHYB/</url>
            <location>Auditorium</location>
            
            <attendee>Bas Steins</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>YHUWBL@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-YHUWBL</pentabarf:event-slug>
            <pentabarf:title>Component-driven UI development with Django and Storybook</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220921T160000</dtstart>
            <dtend>20220921T163000</dtend>
            <duration>0.03000</duration>
            <summary>Component-driven UI development with Django and Storybook</summary>
            <description>Django doesn&#x27;t have many opinions about front-end development. This is a blessing and a curse -- it means a lot of freedom for projects to approach UIs however they see fit, but also a lot of choices to make on each and every project. It also means the Django ecosystem is lagging far behind more modern platforms.

It doesn&#x27;t have to be this way. The team behind the Wagtail CMS spent a lot of time refining how they approach UI development in the context of Django projects, and we&#x27;ll now get to learn from their experience.

We started with workflows that work well with React: components are first-class citizens, and tools like Storybook playing to those strengths. We then adapted this for Django, building a full-fledged design system and making the most of automation to test our user interface.

In this talk we&#x27;ll cover,

-   Component-driven development as a methodology
-   Tools we used and created to apply those concepts to Django codebases
-   Demo time! How we use those tools to build our CMS, Wagtail
-   How we envision the Django ecosystem evolving

This should generally be a beginner-level talk for Django developers. Developers who are mostly focused on back-end work will learn about modern front-end methodologies. We will make some references to popular JavaScript frameworks (React, Vue), but no prior knowledge with those will be required.

Video: https://youtu.be/fke3NYdnPBs</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/YHUWBL/</url>
            <location>Auditorium</location>
            
            <attendee>Thibaud Colas</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>EEPJN7@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-EEPJN7</pentabarf:event-slug>
            <pentabarf:title>The windy path to fast, pain-free, reproducible developer environments</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220921T163500</dtstart>
            <dtend>20220921T170500</dtend>
            <duration>0.03000</duration>
            <summary>The windy path to fast, pain-free, reproducible developer environments</summary>
            <description>If you’ve been part of a team developing with Django you will be familiar with the woes of local development across multiple operating systems. “Docker is melting my new Macbook”, “What is zlib and how do I get it?”, “The backend is just returning HTTP 502???”..

Docker &amp; Compose promised to solve it all, and did get most of the way there for us - but we were left with huge performance issues when file syncing a multi-million line repo on non-native *nix systems: namely MacOS. We were left with modern machines that resembled fancy paper weights.

The issues became such a daily problem for us at YunoJuno that they got in the way of shipping, so we went on the hunt for alternative setups and discovered the incredible powers of native, reproducible builds with the Nix ecosystem alongside the potential intriguing benefits of cloud-based development.

This talk will be a journey through the issues we faced, a deep dive into the avenues we went down and all the trade offs we faced on our way to finding something that worked for us. The end result helps our devs ship correct code faster by spending less time faffing with local development pains.

Video: https://youtu.be/Mx3yiE_CJOY</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/EEPJN7/</url>
            <location>Auditorium</location>
            
            <attendee>Darian Moody</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>8X37KK@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-8X37KK</pentabarf:event-slug>
            <pentabarf:title>The hack behind the curtain! Deploying a Multitenant Django application to more than 1600 stores</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220921T171000</dtstart>
            <dtend>20220921T174000</dtend>
            <duration>0.03000</duration>
            <summary>The hack behind the curtain! Deploying a Multitenant Django application to more than 1600 stores</summary>
            <description>In MercadonaTech we have online orders preparation warehouses called hives. We have evolved and optimized the tools used in these facilities over the last 5 years and we were ready to bring them to our stores where we planned to prepare online orders as well. But we had one little problem, we wanted to move from 3 isolated warehouses to more than 1600 stores. And until that moment, all the logic we developed for them didn&#x27;t expect data from other centres, we had simple on-premise deployments for each hive and different databases that did not share data between them. That was a problem.

This is a story of wonder that tells how we hacked Django&#x27;s ORM to automagically isolate the data from different stores and how we converted this messy hack into an amazing open-source library you can use to implement your own multitenant applications. The hack behind the curtain, welcome to Oz!

Video: https://youtu.be/_9vMEAHNmHE</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/8X37KK/</url>
            <location>Auditorium</location>
            
            <attendee>Emilio Carrión</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>P9NRKD@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-P9NRKD</pentabarf:event-slug>
            <pentabarf:title>Lightning Talks</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220921T174500</dtstart>
            <dtend>20220921T183000</dtend>
            <duration>0.04500</duration>
            <summary>Lightning Talks</summary>
            <description>Video: https://youtu.be/XTSQiPrAz08</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Other</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/P9NRKD/</url>
            <location>Auditorium</location>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>H8EJBJ@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-H8EJBJ</pentabarf:event-slug>
            <pentabarf:title>Bulletproof Python – Property-Based Testing with Hypothesis</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220921T111500</dtstart>
            <dtend>20220921T120500</dtend>
            <duration>0.05000</duration>
            <summary>Bulletproof Python – Property-Based Testing with Hypothesis</summary>
            <description>Do you find yourself working through pages of copied and pasted tests to accommodate a simple code change? Does your software frequently break in unexpected ways despite your testing efforts? Don’t despair! Property-based testing could be your way out of that mess. Rather than working harder and writing more test code, property-based testing forces you to work smarter and test more code with fewer tests.

Traditional tests are example-based. They require the developer to come up with arbitrary inputs and check a system’s behavior against explicit outputs. More often than not, developers only think of inputs that are handled correctly by their code, thus leaving bugs hidden. Property-based tests generate the inputs for you and in many cases they’re more likely to find invalid inputs than humans. The difficulty lies in formulating these test cases.

After this workshop you’ll be comfortable with property-based testing using Hypothesis. You’ll have experience requesting appropriate test data from Hypothesis and in writing tests for common and more advanced properties. At work, your co-workers will be impressed by your unbreakable code ;)

Participants are expected to have basic familiarity with unit testing and a testing framework. Provided code examples use pytest.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Workshop</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/H8EJBJ/</url>
            <location>Workshops</location>
            
            <attendee>Michael Seifert</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>FXNXPV@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-FXNXPV</pentabarf:event-slug>
            <pentabarf:title>Build a production ready GraphQL API using Python</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220921T121000</dtstart>
            <dtend>20220921T130000</dtend>
            <duration>0.05000</duration>
            <summary>Build a production ready GraphQL API using Python</summary>
            <description>Agenda of the worshop

- Workshop introduction
	- The introduction will explain the goal of the workshop and make sure everyone is ready to start
- Intro to type hints
	- Before looking at what GraphQL is, we&#x27;ll do a short introduction on type hints in Python, since we&#x27;ll be using the a lot during the workshop.
- Introduction to GraphQL
	- Here we&#x27;ll be looking at what GraphQL is, how it works and why it has been created
- Our first GraphQL API
	- Here we&#x27;ll get our hands dirty by creating our first GraphQL API using Strawberry. We&#x27;ll also take time to see how to configure Strawberry with Django.
- Let&#x27;s test our API
	- I&#x27;m a big fan of TDD, so before continuing with our workshop we&#x27;ll quickly see how to test our GraphQL API using pytest.
- Schema design
	- In this section we&#x27;ll spend time taking a look at how to design a GraphQL schema. We&#x27;ll also understand the difference between queries and mutations.
- Authentication
	- In this section we&#x27;ll implement authentication to our GraphQL API. We&#x27;ll discuss session based auth vs JWT authentication.
- **Bonus**
   - Performance / Monitoring / Observability
	- In this section we&#x27;ll discuss how we can add observability/monitoring to our APIs and make sure we can keep our API performant over time.
	- We&#x27;ll also see how we can use dataloaders to make our queries efficient. We&#x27;ll also talk about other potential performance improvements (SQL optimisation, Static Queries and more)

	- Integration with React
		- In this section we&#x27;ll see how we can use GraphQL with a frontend framework like React.
	- Subscriptions
		- In this section we&#x27;ll see what subscriptions are in GraphQL and how you can leverage them to build realtime APIs.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Workshop</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/FXNXPV/</url>
            <location>Workshops</location>
            
            <attendee>Patrick Arminio</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>NRNF8P@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-NRNF8P</pentabarf:event-slug>
            <pentabarf:title>Introduction to Diátaxis</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220921T160000</dtstart>
            <dtend>20220921T165000</dtend>
            <duration>0.05000</duration>
            <summary>Introduction to Diátaxis</summary>
            <description>I have run this workshop about 20 times in the last year; it&#x27;s thoroughly road-tested with a wide range of audiences. 

It gives participants the opportunity to work though key aspects of the Diátaxis framework in a structured, collaborative context.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Workshop</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/NRNF8P/</url>
            <location>Workshops</location>
            
            <attendee>Daniele Procida</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>DDCFN8@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-DDCFN8</pentabarf:event-slug>
            <pentabarf:title>Demystifying Modern JavaScript using Vue.js</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220921T165500</dtstart>
            <dtend>20220921T174500</dtend>
            <duration>0.05000</duration>
            <summary>Demystifying Modern JavaScript using Vue.js</summary>
            <description>The workshop is about building a Vue.js application from scratch: a note taking app for DjangoCon.

You will learn about the basics of:
  - Modern JavaScript
  - its ecosystem, and common tooling
  - frontend frameworks (on the example of Vue.js): why they are useful and when to use them

We will build a Vue.js app and cover:
  - Tooling
  - Data binding/Reactivity
  - Templates
  - Components
  - Fetching and sending data

Given the short duration of the workshop, we will cover basics and won&#x27;t get a chance to dive deep.

The main goal of the workshop is for you to walk away confident in being able to explore and work with modern JavaScript / frontend frameworks.

This workshop is intended for developers with little or no JavaScript experience (especially with modern JavaScript). Some JavaScript knowledge is welcome, but not necessary at all.
If you have a lot of experience with frontend frameworks, this workshop is probably not for you.

If you&#x27;re attending, please take a look at [the Github repo](https://github.com/zanderle/Demystifying-Modern-JS) and make sure you have Node 14.18+ or 16+ installed.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Workshop</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/DDCFN8/</url>
            <location>Workshops</location>
            
            <attendee>Žan Anderle</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>HH8XEG@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-HH8XEG</pentabarf:event-slug>
            <pentabarf:title>Morning Announcements</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220922T090000</dtstart>
            <dtend>20220922T090500</dtend>
            <duration>0.00500</duration>
            <summary>Morning Announcements</summary>
            <description></description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Other</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/HH8XEG/</url>
            <location>Auditorium</location>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>EE3XCD@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-EE3XCD</pentabarf:event-slug>
            <pentabarf:title>Keynote: What should you have to worry about</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220922T090500</dtstart>
            <dtend>20220922T100500</dtend>
            <duration>1.00000</duration>
            <summary>Keynote: What should you have to worry about</summary>
            <description>This keynote will explore some recent popular trends in open source software and development, and assess their relevance to a Django developer. There may be some things that you may want to try out, but there&#x27;s a difference between learning more for expanding your knowledge, and things that you must do. 

While trends are always changing, this keynote will focus on three main pillars: architecture, software, and community. 

You will come away with a shortlist of things that will be of relevance to you in 2022, and as future trends appear, give you tools to help you identify what you should have to worry about.

Video: https://youtu.be/MisoW7LHcfE</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Keynote</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/EE3XCD/</url>
            <location>Auditorium</location>
            
            <attendee>Katie McLaughlin</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>73ZDF9@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-73ZDF9</pentabarf:event-slug>
            <pentabarf:title>Will PyScript replace Django? - What PyScript is and is not</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220922T100500</dtstart>
            <dtend>20220922T103500</dtend>
            <duration>0.03000</duration>
            <summary>Will PyScript replace Django? - What PyScript is and is not</summary>
            <description>In this talk, through some examples and demos of PyScript, we will see how to use it - just include the CDN URL, understand that it is a frontend-only Python that runs on the browser and learn the fact that it can work with javascript in conjunction.

After that, we will look at what is under the hood - Pyodide - which is a Python distribution for the browser. It is what is essential to power PyScript. We will discover what is the difference between using PyScript and Pyodide.

Finally, we will conclude what is already available in PyScirpt like which library you can run on PyScript and which ones are still yet to come. In the end, we will answer the question - Will PyScript replace Django?

This talk is for those who are curious about PyScript and the idea of running Python in the browser in general. We will assume no prior knowledge about it.

Video: https://youtu.be/tzRRImsez88</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/73ZDF9/</url>
            <location>Auditorium</location>
            
            <attendee>Cheuk Ting Ho</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>CUTX7H@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-CUTX7H</pentabarf:event-slug>
            <pentabarf:title>🐍 ❤️ 🦀</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220922T111500</dtstart>
            <dtend>20220922T114500</dtend>
            <duration>0.03000</duration>
            <summary>🐍 ❤️ 🦀</summary>
            <description>Python has several performance problems. Not only its GIL, but also the fact that it&#x27;s only an interpreted language. Historically, people looked at writing C extensions for performance critical code. C being a dangerous piece of equipment, can nowadays be replaced with Rust. Let&#x27;s look at what that could possibly mean for the Django environment.

In this talk, I&#x27;ll give a (very) brief introduction into Rust, and then dive right into how the integration works with Python. Lastly, I&#x27;ll show an example how a &quot;bit&quot; of Rust could be used inside Django or inside a Django project.

Video: https://youtu.be/1rJ3-0JXqQo</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/CUTX7H/</url>
            <location>Auditorium</location>
            
            <attendee>Markus Holtermann</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>HXKMJX@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-HXKMJX</pentabarf:event-slug>
            <pentabarf:title>Better managing i18n and PO files</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220922T115000</dtstart>
            <dtend>20220922T122000</dtend>
            <duration>0.03000</duration>
            <summary>Better managing i18n and PO files</summary>
            <description>When dealing with static pages translation in python we have to work with PO files that are the standard way to internationalize our page, however, these files can get pretty big and complex to maintain  (I’ve seen cases where these files have 25k lines of translations), so the idea behind this talk is to share a workflow that can help us to deal with these large files under the philosophy of “divide and conquer”. In this talk you will learn how to standardize the process for translating your pages and how to stop dealing with those big ugly files by using the polib library, also you will be able to start sending parallel translation projects, saving your organization time and money.

Video: https://youtu.be/n_OPN1dH0sM</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/HXKMJX/</url>
            <location>Auditorium</location>
            
            <attendee>Felix Mino</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>ZQ8L93@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-ZQ8L93</pentabarf:event-slug>
            <pentabarf:title>Observe!</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220922T122500</dtstart>
            <dtend>20220922T125500</dtend>
            <duration>0.03000</duration>
            <summary>Observe!</summary>
            <description>Observability is a massive buzzword, let&#x27;s break it down and see what you need in order to sleep well with code in production. Let&#x27;s start with the low hanging fruit and work up from there:

* Is it working? (uptime monitoring)
* What is it doing? (logging)
* How is it doing? (metrics)
* How is it doing it? (APM)
* What just happened? (Gathering errors)

We will close up with Tips &amp; Tricks to get the most out of your new observability setup.

Video: https://youtu.be/n_OPN1dH0sM</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/ZQ8L93/</url>
            <location>Auditorium</location>
            
            <attendee>Honza Král</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>3KNEEA@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-3KNEEA</pentabarf:event-slug>
            <pentabarf:title>How to wag a dog</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220922T140000</dtstart>
            <dtend>20220922T143000</dtend>
            <duration>0.03000</duration>
            <summary>How to wag a dog</summary>
            <description>The tail of the dog expresses its disposition and reflects its health, and we expect it to be a reliable outward sign of what&#x27;s going on inside the dog. We expect the same kind of relationship between software and documentation: that documentation should reliably tell us about the software, providing clear and up-to-date insights into it.

I think that this is a naïve view of both dogs and software. 

I will discuss, with examples, why it&#x27;s a problematic idea for documentation. It&#x27;s not actually true, and failing to recognise this is one reason why documentation is often so bad. Recognising the true nature of the relationship on the other hand puts documentation authors in a much more powerful position than they are usually understood to have - and that&#x27;s something they can use to their advantage. 

In other words, the tail is already wagging the dog, and that&#x27;s the way it should be.

This talk is about documentation, but it&#x27;s also an exploration and critique of some commonly-held ideas about the relationship between supposedly active and creative activities - of which making software is one example - and those seen as more passive and interpretive ones - like documentation.

Along the way, this talk will discuss topics including: the relationship between seeing and looking, riding on motorbikes, visiting museums, and why we should reconsider now-discredited pre-Newtonian theories of vision. 

We&#x27;ll get from dogs and their tales to an approach to documentation that improves **both** documentation and software, and gives us a tool for reassessing other patterns of work and life too.

Video: https://youtu.be/R4O2WoFC-JQ</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/3KNEEA/</url>
            <location>Auditorium</location>
            
            <attendee>Daniele Procida</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>AM3J89@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-AM3J89</pentabarf:event-slug>
            <pentabarf:title>Quality Assurance in Django - Testing what matters</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220922T143500</dtstart>
            <dtend>20220922T150500</dtend>
            <duration>0.03000</duration>
            <summary>Quality Assurance in Django - Testing what matters</summary>
            <description>In software development, having tests is essential.

As developers, tests not only help us sleep well at night, but they also allow us to iterate faster &amp; make changes with more confidence.

If we want quality, we need tests.

When it comes to writing tests in Django, we often ask ourselves - “What to test?”.

It’s an important question since we don’t always have the time to test everything we want. Sometimes, we need to make a conscious decision about what to test &amp; what to leave untested.

When making that decision, it’s important to have a good sense of “what’s important”, so we can test that.

Django gives us plenty of testing tools &amp; a lot of choices for what to test - we can test models, forms, views, APIs, serializers, services, selectors, tasks &amp; basically anything that’s well defined within the Django Framework.

In this talk, we’ll do 3 important things:

1. We’ll put our quality assurance hat on.
2. We’ll explore different real-life scenarios with Django apps.
3. And we’ll see how to approach testing in those scenarios, so we can test the things that matter!

By exploring those scenarios, we’ll also touch upon the following topics:

- Having a test plan.
- Naming conventions for our tests &amp; test methods.
- Django test settings.
- Factories.
- Test speed &amp; optimizations.

The talk is going to be practical &amp; pragmatic, giving plenty of examples &amp; references for a follow-up.

Video: https://youtu.be/PChaEAIsQls</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/AM3J89/</url>
            <location>Auditorium</location>
            
            <attendee>Radoslav Georgiev</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>CQHQEM@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-CQHQEM</pentabarf:event-slug>
            <pentabarf:title>Predict Lightning Strikes using Django and AWS</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220922T151000</dtstart>
            <dtend>20220922T154000</dtend>
            <duration>0.03000</duration>
            <summary>Predict Lightning Strikes using Django and AWS</summary>
            <description>Predicting a lightning strike with 99.6% accuracy requires advanced algorithms, expert developers and data — a lot of data. FLASH Scientific Technology pulls data from a variety of sources including weather radars and location-specific information like altitude, moisture, wind direction and temperature. It was imperative that FLASH develop an application that could pull, read and process the data both quickly and accurately.
 
In this case study and product demo, you’ll learn how to take an algorithm and idea from a Jupyter Notebook to production ready and cloud native.
 

1. Optimize Python code structure 
    1. As the Zen of Python states, “simple is better than complex.” The first part of this presentation will focus on the importance of reviewing and simplifying code to ensure faster data processing speeds and that the code is easy to both read and duplicate.
2. Build fast, efficient and accurate APIs with Django 
    1. Once the code is optimized, it’s ready for production. You’ll learn how we built an interface that could both request data from various web services and quickly make accurate predictions using FLASH’s proprietary and patent-issued algorithm. Specifically, this talk will feature:  
        1. best practices and lessons learned, including insight into why we stored all of the Django application elements in a single library; 
        2. why all of the data needed to be pulled directly from the cache; and 
        3. why the algorithm was kept separate.
3. Deploy serverless and scalable applications using AWS Lambda and AWS Fargate 
    1. Finally, this talk will:
        1. showcase how the Django application we built integrates seamlessly with the serverless components of AWS including AWS Lambda and AWS Fargate; 
        2. unveil the secrets of building Python Container Images for AWS Lambda (Hint: by using container images for Lambda code vs. manually submitting .zip files we saved significant time, money, and effort. We also reduced errors associated with manual changes.); 
        3. review the importance of building applications to be serverless from the beginning. 
4. Product Demo 
    1. Today, the application — which initially took minutes to make lightning strike predictions with 99.6% accuracy and a 15- to 25-minute lead time (saving time, money and lives) — can predict when and where lightning will strike in just seconds. The presentation will conclude with a demo of the product, which is deployed with GitLab CI/CD merge request pipeline.

Both beginner and intermediate developers will benefit from this talk, and it is ideal for developers wanting to learn how to use Django for complex predictive-technology projects.

Video: https://youtu.be/41S6bwdGHRo</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/CQHQEM/</url>
            <location>Auditorium</location>
            
            <attendee>Calvin Hendryx-Parker</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>MZWJEA@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-MZWJEA</pentabarf:event-slug>
            <pentabarf:title>From React to htmx on a real-world SaaS product: we did it, and it&#x27;s awesome!</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220922T161500</dtstart>
            <dtend>20220922T164500</dtend>
            <duration>0.03000</duration>
            <summary>From React to htmx on a real-world SaaS product: we did it, and it&#x27;s awesome!</summary>
            <description>🔍 You’ve probably heard of **[htmx](https://htmx.org)**, maybe seen talks about it (maybe even [right here last year](https://www.youtube.com/watch?v=Zs0DXR1S03M)). Demos are great, potential seems enormous. Maybe you&#x27;ve heard it&#x27;s great for quick prototyping and tried it.

❓ But what about switching for your real-life project, against everything you’ve heard since 2016 (”*modern web interfaces need Javascript-driven webapps*”, &quot;*the best SaaS products are made of an SPA*&quot;, etc.)? Does htmx keep its promises? What impact on your product, your team, your business?

✅ That&#x27;s what we just did at **[Contexte](https://www.contexte.com/)**, by getting rid of the React SPA of a SaaS product. It wasn&#x27;t a easy decision to make (because the UI holds some fairly complex interactions and we were told such interactions require client-side state management), but it&#x27;s now such a relief. Maybe if we share our experience the decision would be easier to make for others.

💬 Draft outline of the talk:

- **What is Contexte**? mainly about our Product/Tech team size and organization
- **What is our first SaaS product, Contexte Scan** (click [here](https://essai-contexte-com.translate.goog/scan?_x_tr_sl=fr&amp;_x_tr_tl=en&amp;_x_tr_hl=fr&amp;_x_tr_pto=wapp) for a Google-translated product presentation)? a quick demo, with an emphasis on the most complex UI elements (I&#x27;m not here to sell it to you 😉 )
- **Our React UI**: bulky, buggy, constantly refactored, dependency hell (quick tour, some figures)
- **Our htmx UI**: a bit of code here, with examples of how you replace client-side state management with just some htmx-loaded HTML fragments
- **Impact on end-users**: same UX, better performances
- **Impact on the team**: faster, fullstack, more agile
- **Impact on the planet**: smaller footprint on end-users computers
- **Conclusion**: go for it!

Video: https://youtu.be/3GObi93tjZI</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/MZWJEA/</url>
            <location>Auditorium</location>
            
            <attendee>David Guillot</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>JCSCHB@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-JCSCHB</pentabarf:event-slug>
            <pentabarf:title>The (Python) Magic of Django: A Tour of the Codebase</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220922T165000</dtstart>
            <dtend>20220922T172000</dtend>
            <duration>0.03000</duration>
            <summary>The (Python) Magic of Django: A Tour of the Codebase</summary>
            <description>Learning how Django worked under the hood was the thing that gave me the confidence, and more importantly some _guidance_, to use Python&#x27;s advanced functionality. Advanced things like &#x27;dunder&#x27; methods, metaclasses, and even things like iterating through the contents of a module.

I&#x27;ll cherry-pick and explain some of Django&#x27;s more advanced code features, things like:

* How Django loads code dynamically to put your application and configuration together.
* The `ModelBase` metaclass, and how it attaches magic functonality to your `Model` subclasses.
    * How `__init_subclass__` can be used to provide some or all of this behaviour in Python 3.6+
* How `kwargs` are handled to configure queries and generate SQL.

As we look at the code, I&#x27;ll also cover some of the design decisions that make Django such a joy to work with, without having to understand the implementation details hidden under the hood.

Video: https://youtu.be/92l_MyGIulA</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/JCSCHB/</url>
            <location>Auditorium</location>
            
            <attendee>Mark Smith</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>XWUYA8@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-XWUYA8</pentabarf:event-slug>
            <pentabarf:title>factory_boy: testing like a pro</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220922T172500</dtstart>
            <dtend>20220922T175500</dtend>
            <duration>0.03000</duration>
            <summary>factory_boy: testing like a pro</summary>
            <description>After working using the factory_boy library for over 3 years on a Django monolith containing +230 tables, +2200 relevant files, and +75k relevant lines of code, I&#x27;ve collected and listed all my biggest learnings.

In this presentation, I try to share some of my experiences, showing what I consider to be good practices in using factory_boy in complex systems.

Content:

* A short introduction of myself
* factory_boy: what is it? - the definition and the purpose of the tool
* Example application - a quick overview of the application we will use to demonstrate the best practices
* How to install factory_boy
* How to use factory_boy
* Best Practices:
1. Factories must represent their models
2. Do not rely on defaults from factories
3. Factories must have only the required data. if the field is nullable -&gt; under traits.
4. Build over create
5. If FK is in the table -&gt; SubFactory. If FK is in the other table -&gt; RelatedFactory + trait
6. Fixtures only to wrap factories in the test file
7. Avoid using fixtures on shared files like conftest
* Wrapping up

Repository: https://github.com/camilamaia/factory-boy-best-practices

Video: https://youtu.be/-C-XNHAJF-c</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/XWUYA8/</url>
            <location>Auditorium</location>
            
            <attendee>Camila Maia</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>SQ8SUR@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-SQ8SUR</pentabarf:event-slug>
            <pentabarf:title>Lightning Talks</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220922T180000</dtstart>
            <dtend>20220922T184500</dtend>
            <duration>0.04500</duration>
            <summary>Lightning Talks</summary>
            <description>Video: https://youtu.be/fOi9K0YuKyI</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Other</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/SQ8SUR/</url>
            <location>Auditorium</location>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>TDWUUA@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-TDWUUA</pentabarf:event-slug>
            <pentabarf:title>Rethinking Forms in Django</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220922T111500</dtstart>
            <dtend>20220922T120500</dtend>
            <duration>0.05000</duration>
            <summary>Rethinking Forms in Django</summary>
            <description>We Django users know well how to create a full-featured editor from a given data structure and without the need of cumbersome HTML coding. This workflow probably is one of the main factors for its success. With the Django-Admin it in fact became so easy to create editors, that out of laziness, they nowadays are used ubiquesly. A prominent proponent adopting this antipattern is Django-CMS.

On the other side, features currently offered by Django often are not suitable to create frontend-centric web-applications with a contemporary user interface. This is where Single Page Applications kick in, written in one of the many modern JavaScript frameworks. This may relegate Django to a pure data store, shifting the business logic of an application towards the browser. With the advent of HTMX it seems that this trend is reverting again, since a high level of interactivity can be achieved without going the SPA path.

One of the main hurdles remaining is the interactive handling of forms. Remember, that since Django was first released, a lot has changed in HTML 5 and JavaScript. Django however, still relies on a pure HTTP request/response-cycles for form validation and submission. This is where Django can not compete with the usability of JavaScript frameworks, since most of them make heavy usage of the built-in form data processing and validation functions.

In this talk I will show how to achieve a user experience equal to that of many contemporary Single Page Applications, but without having to introduce external frameworks and their mindset. This works by using a special webcomponent wrapping one or more Django forms, and letting it handle all the validation, feedback and submission. 

Compared to other solutions, for a developer this approach is almost unintrusive since it is possible to reuse all existing Django Form- and ModelForm classes without any modification. Only the Django Form Views have to be slightly adopted. This proposed solution can handle all input fields and their corresponding widgets, which Django currently offers (except geospacials). With this tool, a developer can create the detail view for a Django model with the same ease, as doing the same task using the Django-Admin. In addition, the counterpart of the StackedInline class can be nested up to an infinite number of levels. It even is possible to create full editable list views for a model.

Thanks to the form field renderer introduced in Django 4.0, the proposed solution works with any of the major CSS frameworks, such as Bootstrap, Bulma, Foundation, Tailwind, UIKit or even your own implementation. This therefore could become a real game changer on how we handle forms with a way better User eXperience.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Workshop</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/TDWUUA/</url>
            <location>Workshops</location>
            
            <attendee>Jacob Rief</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>7NACE9@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-7NACE9</pentabarf:event-slug>
            <pentabarf:title>What are development environments for, and why isn’t it simple to make them?</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220922T121000</dtstart>
            <dtend>20220922T130000</dtend>
            <duration>0.05000</duration>
            <summary>What are development environments for, and why isn’t it simple to make them?</summary>
            <description>Developing Django production applications means running into the same frictions in any other language or framework. To address them, we do DevOps, but executing DevOps isn’t always so simple to do. A limited number of people on the team may have the skills, experience with tooling, or even knowledge of the codebase to provision environments to test or investigate something. 

It’s limited, usually, to the DevOps engineer. 

Without them, workflows can get blocked. With them, experimentation can be minimal, because it takes a real person’s time and energy to create the space to do so. The only way to manage all the changes is to stick to an enforced Dev-Stage-Prod workflow, which is the only thing that makes managing this problem across multiple sites possible. 

In this workshop, we’ll take a look at developing Django applications on Platform.sh, where true staging environments require negligible energy to provision, all within a unified workflow alongside production. 

Once you&#x27;ve deployed your project, new environments are a git branch away, and disposable if an experiment doesn’t work. You&#x27;ll add new features and updates in isolation, all while having automatic access to production data.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Workshop</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/7NACE9/</url>
            <location>Workshops</location>
            
            <attendee>Chad Carlson</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>CFCFFF@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-CFCFFF</pentabarf:event-slug>
            <pentabarf:title>Server-Side is back, baby! 💻 optional. Just 👀  supported 😊</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220922T140000</dtstart>
            <dtend>20220922T145000</dtend>
            <duration>0.05000</duration>
            <summary>Server-Side is back, baby! 💻 optional. Just 👀  supported 😊</summary>
            <description>## Sample application

If you want to follow along during the livecode session, you can install the sample application by following these [instructions](https://github.com/runekaagaard/hypergen-djangocon-2022). Otherwise just sit back and enjoy the show! 🤯

## Outline

1. About Liveviews
    - From pure server side rendering, over jQuery, then React to liveviews. Our evolution of web development.
    - Liveview basics - the what, why, who, where and when.
2. Hypergen
    - Architecture and design choices.
    - Introduction and examples.
3. We build an example app in Hypergen together, showcasing
    - Pure Python HTML templates
    - Base templates and template composition
    - Liveviews
    - Binding to DOM events
    - Actions
    - Partial DOM updates and other client commands
    - Notifications and plugins
4. Q&amp;A</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Workshop</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/CFCFFF/</url>
            <location>Workshops</location>
            
            <attendee>Rune Kaagaard</attendee>
            
            <attendee>Jeppe Tuxen</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>87C7VD@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-87C7VD</pentabarf:event-slug>
            <pentabarf:title>Everything You Wanted to Know About Databases as a Developer but Were Too Afraid to Ask Your DBA</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220922T161500</dtstart>
            <dtend>20220922T170500</dtend>
            <duration>0.05000</duration>
            <summary>Everything You Wanted to Know About Databases as a Developer but Were Too Afraid to Ask Your DBA</summary>
            <description>The database forms the backbone of many applications so it’s essential for applications to interact with the database in an optimal way. Unfortunately, database administration doesn’t usually form part of a developer’s training so you may have a wealth of experience and talent in designing and developing applications, yet have little or no database knowledge. There’s probably a database expert in your organisation in the form of a DBA, but this expert is probably too ~~grumpy~~ busy to take the time to explain to you how databases work.

This workshop aims to provide you with the minimum that you, as a developer, need to know about databases in general, and about PostgreSQL in particular. You will come away with a “database cheat sheet” of the different terminology and concepts that will make you sound like an instant database expert.

You’ll learn to explain with confidence the difference between a database, a database cluster and an instance, how database objects can be partitioned and why you might want to do that, how schemas and tablespaces can be used to group database objects, the different constraints that can be used to enforce the integrity of your data, the difference between a view and a materialized view and much more.

If you want to:
1. Understand more about what a database is and how it works
2. Make your database applications better 
3. Impress your ~~friends~~ DBA

then this presentation is for you.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Workshop</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/87C7VD/</url>
            <location>Workshops</location>
            
            <attendee>Karen Jex</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>UH8KUK@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-UH8KUK</pentabarf:event-slug>
            <pentabarf:title>TDD applied to Django API development</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220922T171000</dtstart>
            <dtend>20220922T180000</dtend>
            <duration>0.05000</duration>
            <summary>TDD applied to Django API development</summary>
            <description>TDD is a software design methodology that is based on first writing tests, then writing source code that successfully passes those tests, and finally refactoring the written code.

In this workshop, we propose an exercise oriented to the development of APIs that we will solve using this TDD process. In this way, we will go through each of the steps observing the importance of each one of them. And so we will exemplify our day to day, how with Python we face problems and how TDD helps us to solve them. 

At the end of the workshop, you will leave knowing which are the steps to follow to make developments with the TDD methodology and be able to apply what you have learned.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Workshop</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/UH8KUK/</url>
            <location>Workshops</location>
            
            <attendee>Emilio Carrión</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>UVMXJL@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-UVMXJL</pentabarf:event-slug>
            <pentabarf:title>Morning Announcements</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220923T100000</dtstart>
            <dtend>20220923T100500</dtend>
            <duration>0.00500</duration>
            <summary>Morning Announcements</summary>
            <description></description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Other</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/UVMXJL/</url>
            <location>Auditorium</location>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>GKUVAX@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-GKUVAX</pentabarf:event-slug>
            <pentabarf:title>Async Django: The practical guide you&#x27;ve been **awaiting** for.</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220923T100500</dtstart>
            <dtend>20220923T103500</dtend>
            <duration>0.03000</duration>
            <summary>Async Django: The practical guide you&#x27;ve been **awaiting** for.</summary>
            <description>There’s a lot of excitement about Django going async in 3.0+ but also many questions. This talk will provide a brief introduction to async, cover its pros/cons, and show how to build async into your Django app.

We’ll look at four different ways to build a real-time chat app and see how the need for async comes up:

* Polling 
* Long-polling
* Server-sent events
* Websockets

Getting async online can be the hardest bit, so we’ll wrap up with a few pointers on deployment to get you on your way.

Video: https://youtu.be/B5uQPwX4VLo</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/GKUVAX/</url>
            <location>Auditorium</location>
            
            <attendee>Carlton Gibson</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>DUVTY3@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-DUVTY3</pentabarf:event-slug>
            <pentabarf:title>Run your tests in hundreds of different environments fast. I mean really fast.</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220923T111500</dtstart>
            <dtend>20220923T114500</dtend>
            <duration>0.03000</duration>
            <summary>Run your tests in hundreds of different environments fast. I mean really fast.</summary>
            <description>The Sentry SDK has to work in basically every Python environment imaginable. From Python 2.7 and Django 1.8 onward, including alternative implementations like PyPy. (And besides Django the SDK supports over fifteen other Python frameworks) Altogether our test suite has to run in a couple of hundred environments.

As the test suite and environments grew our test suite slowed down. When it took 35-40 minutes to run the test suite we knew:

Things had to change. So we rolled up our sleeves and set out to improve our test suite and make it run in under 10 minutes.

In this talk, I will present to you our journey. Everything we learned about Pytest, Tox, and GitHub actions to make your test suite run as fast as possible.

Video: https://youtu.be/cLptIbomkoM</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/DUVTY3/</url>
            <location>Auditorium</location>
            
            <attendee>Anton Pirker</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>NJR3PV@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-NJR3PV</pentabarf:event-slug>
            <pentabarf:title>Handling Django in highly concurrent &amp; scale environment</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220923T115000</dtstart>
            <dtend>20220923T122000</dtend>
            <duration>0.03000</duration>
            <summary>Handling Django in highly concurrent &amp; scale environment</summary>
            <description>In this talk, we&#x27;ll discuss some of the issues that we(@SquadStack) faced when handling Django in a highly concurrent &amp; scalable environment &amp; how did we handle it to the point which satisfied our requirements. This talk will be highly practical in the sense that the presenter will present real-world examples &amp; issues that will come by it and then we&#x27;ll move towards some of the ideas we can explore to mitigate those issues.

Some of the ideas we&#x27;ll explore:-

a) How Django .save() can cause issues in highly concurrent environment.

b) How Django admin&#x27;s native search might cause issues in high scaling environment &amp; how to deal with it(hint plugging in ES for search might not be the only solution, there are cheaper ways available)

c) How to change DB schema at a scale where DB is not the only problem but how do you deal with cached objects.

d) How to do faster count for Django Admin pages

e) etc...

The solutions presented in the talk might not be perfect but they just seem to work, and might be worth trying.

Video: https://youtu.be/ed3-wfDsEXA</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/NJR3PV/</url>
            <location>Auditorium</location>
            
            <attendee>Tarun Garg</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>FFDXHZ@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-FFDXHZ</pentabarf:event-slug>
            <pentabarf:title>A use case of implementing Domain-Driven Design (DDD) in Django</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220923T122500</dtstart>
            <dtend>20220923T125500</dtend>
            <duration>0.03000</duration>
            <summary>A use case of implementing Domain-Driven Design (DDD) in Django</summary>
            <description>We had the opportunity to apply DDD to Django in OSIS, a long-term project for managing students and their education for Université Catholique de Louvain in Belgium. After a year into the project implementing new features, it&#x27;s time to provide our feedback to the Django community.

A general outline:
1. Intro to the OSIS project (goal, short history, actors, domain)
2. The why and when for choosing DDD
3. Common tactical patterns to implement in Python/Django
4. Recap and conclusion on our DDD usage and where to go from there
5. Questions

The project is open-sourced at https://github.com/uclouvain/  along with its numerous submodules which I will present shortly in the first part. I will take some time to explain the concepts of onion architecture and some DDD design pattern so it should be accessible enough for Django beginners. The code is not the key, but rather think communication and comprehension!

Edit post-talk: the slides that were presented are at https://sebcorbin.github.io/ddddjango/

Video: https://youtu.be/t5DBiKsjvS4</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/FFDXHZ/</url>
            <location>Auditorium</location>
            
            <attendee>SebCorbin</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>MBVCJ3@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-MBVCJ3</pentabarf:event-slug>
            <pentabarf:title>Keynote: Growing pains of an open source project</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220923T140000</dtstart>
            <dtend>20220923T150000</dtend>
            <duration>1.00000</duration>
            <summary>Keynote: Growing pains of an open source project</summary>
            <description>This keynote will explore how the needs of an open source software project changes as it grows. The talk will focus on the choices that open source project maintainers must make and the things they need to do to maintain the project and foster a healthy community.

You will come away with a better understanding and appreciation of the effort that goes into building and maintaining an open source software project and, perhaps more importantly, the community around it.

Video: https://youtu.be/TRK6C09JHVc</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Keynote</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/MBVCJ3/</url>
            <location>Auditorium</location>
            
            <attendee>Pradyun Gedam</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>B7GSRY@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-B7GSRY</pentabarf:event-slug>
            <pentabarf:title>Data-Oriented Django</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220923T150000</dtstart>
            <dtend>20220923T153000</dtend>
            <duration>0.03000</duration>
            <summary>Data-Oriented Django</summary>
            <description>My high school class defined computing as: software controlling hardware to consume input data and emit output data. Simple enough that I still remember it.

Data-Oriented Design invites us to take this definition seriously. Users only care about convenient input, correct output, as fast as possible. Many abstractions we reach for can hold us back from reaching these goals.

This talk will first look at Data-Oriented Design through some general examples, including speeding up JSON parsing in C++ more than 50x. It will then show some Django data patterns that can make our code small and fast, such as normalization, reducing memory usage, splitting models, and techniques for getting the database to do as much work as possible.

Video: https://youtu.be/gfPNeQR1aSc</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/B7GSRY/</url>
            <location>Auditorium</location>
            
            <attendee>Adam Johnson</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>BSFVSC@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-BSFVSC</pentabarf:event-slug>
            <pentabarf:title>Why would anyone use Snowflake as a backend for Django?</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220923T160000</dtstart>
            <dtend>20220923T163000</dtend>
            <duration>0.03000</duration>
            <summary>Why would anyone use Snowflake as a backend for Django?</summary>
            <description>In this talk we are going to review the progress on making Snowflake a worthy backend for Django:

- Review of community and customer demand for a Snowflake backend for Django.
- Review of the multiple independent implementations created.
- Overview of the corporate-sponsored open-source development that Cedar Cares sponsored Tim Graham (Django Fellow 2014-2019) to develop.
- Review of the Snowflake architecture, upcoming features, and how it matches the Django roadmap.
- Forward looking opportunities for the Django community and Snowflake.

Video: https://youtu.be/1n_umQuGCEI</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/BSFVSC/</url>
            <location>Auditorium</location>
            
            <attendee>Felipe Hoffa</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>BDATHF@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-BDATHF</pentabarf:event-slug>
            <pentabarf:title>How to facilitate sponsorships for open source projects</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220923T163500</dtstart>
            <dtend>20220923T170500</dtend>
            <duration>0.03000</duration>
            <summary>How to facilitate sponsorships for open source projects</summary>
            <description>In this session, we will present the audience with the ins and outs of managing sponsorships for a project, and answer questions such as:

- When is it worth introducing sponsorships in an open source project?
- How to make it as easy as possible for companies to pay?
- What to offer to enterprise sponsors?
- How to transparently manage and redistribute the money?

We will present [OpenCollective](https://opencollective.com/) and introduce the audience to the legal and financial problems it solves.

The author of this talk maintains [dj-stripe](https://dj-stripe.dev/), a Stripe-sponsored Django project that has redistributed money to multiple developers, maintainers, contractors and organizations for paid work.

Video: https://youtu.be/_8joxlHeN3o</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/BDATHF/</url>
            <location>Auditorium</location>
            
            <attendee>Deleted User</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>8ZG8XV@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-8ZG8XV</pentabarf:event-slug>
            <pentabarf:title>Foundational Knowledge: The Why and How of the Django Software Foundation</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220923T171000</dtstart>
            <dtend>20220923T174000</dtend>
            <duration>0.03000</duration>
            <summary>Foundational Knowledge: The Why and How of the Django Software Foundation</summary>
            <description>The Django Software Foundation&#x27;s mission is to promote, support, and advance its open-source project: in our case, the Django Web framework.
This talk will discuss how the foundation came about, how it works to satisfy it&#x27;s mission, and how it and the community can remain relevant and vibrant well into the future.

Video: https://youtu.be/uJnaEZkoVTg</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/8ZG8XV/</url>
            <location>Auditorium</location>
            
            <attendee>Chaim Kirby</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>PAZ3GV@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-PAZ3GV</pentabarf:event-slug>
            <pentabarf:title>Lightning Talks</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220923T174500</dtstart>
            <dtend>20220923T181500</dtend>
            <duration>0.03000</duration>
            <summary>Lightning Talks</summary>
            <description>Video: https://youtu.be/c6X9cSP6AZo</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Other</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/PAZ3GV/</url>
            <location>Auditorium</location>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>3CEKKZ@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-3CEKKZ</pentabarf:event-slug>
            <pentabarf:title>Closing Session</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220923T181500</dtstart>
            <dtend>20220923T183000</dtend>
            <duration>0.01500</duration>
            <summary>Closing Session</summary>
            <description>Video: https://youtu.be/z42Jx1Tro3Y</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Other</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/3CEKKZ/</url>
            <location>Auditorium</location>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>LWJHYJ@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-LWJHYJ</pentabarf:event-slug>
            <pentabarf:title>Everything you didn&#x27;t want to know about Cross-site Request Forgery (CSRF) in Django</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220923T111500</dtstart>
            <dtend>20220923T120500</dtend>
            <duration>0.05000</duration>
            <summary>Everything you didn&#x27;t want to know about Cross-site Request Forgery (CSRF) in Django</summary>
            <description>In this talk, we will unwrap an underestimated class of security vulnerabilities and explore what Cross-site Request Forgery (CSRF) is all about, what can (and can&#x27;t) be used to protect against CSRF attacks and how Django (REST Framework) deals with all of it.

If that sounds scary, don&#x27;t worry. I promise you, your application&#x27;s business logic is harder to understand than this. After this talk, you won&#x27;t be confused by CSRF ever again.

**What is Cross-site Request Forgery (CSRF) all about?**

We will explain the attack flow, involved parties and components in-depth and try to illustrate why protecting against CSRF is so important. We will tinker with some easy to understand examples to explain all of it. The example project will be shared after the talk so that you can try all of it at home. After all, one of the best ways to learn is to experiment!

**What can (and can&#x27;t) be used to protect against CSRF attacks?**

Equipped with the knowledge of what Cross-site Request Forgery is, we will talk about the current best practices to prevent CSRF attacks.

**How do Django &amp; Django REST Framework prevent CSRF attacks?**

In the final, and biggest section of the talk, we will have a look at what Django and Django REST Framework provide to protect our applications against CSRF attacks. We will explain the most important settings and how to configure the system properly. A particular focus will be placed on Single-Page applications, since it&#x27;s harder and more complex to get this setup up and running.



You should have a basic understanding of how Django and web applications, including HTTP, HTML and JavaScript work. If you have completed the official Django and Django REST Framework tutorial, you should be able to follow this talk quite easily.


**Here the link to the slides and projects: https://www.andreas.earth/s/djangocon-22/**</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Workshop</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/LWJHYJ/</url>
            <location>Workshops</location>
            
            <attendee>Andreas Schmitz</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>USKUG9@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-USKUG9</pentabarf:event-slug>
            <pentabarf:title>What’s happening and what do I do about it?</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220923T121000</dtstart>
            <dtend>20220923T130000</dtend>
            <duration>0.05000</duration>
            <summary>What’s happening and what do I do about it?</summary>
            <description>**“What do I do?” is an assessment we make 1000x a day.**

When your top values are clear, your options are, too.

Once you understand why things drive you the way they do, you take the wheel.

You can suddenly diagnose:

* Why your day doesn’t feel great.
* Why things aren’t working.
* Why you’re not getting back what you put in.
* Why you’re not feeling satisfied, even when you’ve done all the things.
* What’s happening.
* Now what? 
* What leap to take.
* What decision feels right.
* How to handle things.

It’s a super power you can apply to any situation.

**In this session, you’ll identify:**

* Your top two personal values
* How to use creativity to get clarity
* How to quickly make decisions that create impact

If you feel professionally or personally unsatisfied, want more ease around decisions, or are searching for ways to create impact  – this session is for you.

Join Certified Executive + Founder Coach &amp; Master Workshop Facilitator  Angela Parker for this unique session that will help you get clear and will inspire you to take action.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Workshop</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/USKUG9/</url>
            <location>Workshops</location>
            
            <attendee>Angela Parker (she/her)</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>ADHERT@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-ADHERT</pentabarf:event-slug>
            <pentabarf:title>Creating of really multilingual Django project</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220923T145000</dtstart>
            <dtend>20220923T154000</dtend>
            <duration>0.05000</duration>
            <summary>Creating of really multilingual Django project</summary>
            <description>In this workshop, i take a own Django-TOF opensource project and create small Really Multilang Project, how it should be, to avoid problem in future.

1. Starting a multilingual Django project. What we should not forget.
2. Static translated texts of the project. What&#x27;s wrong with i18n.
3. Problems with Automatic Translation.
4. Why translatable dynamic content will not translate properly.
5. Why not existing Django/Python multilingual solutions?</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Workshop</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/ADHERT/</url>
            <location>Workshops</location>
            
            <attendee>Maxim Danilov</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>RFFG3Z@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-RFFG3Z</pentabarf:event-slug>
            <pentabarf:title>Understanding everything your Django code is doing at runtime using Kolo</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220923T160000</dtstart>
            <dtend>20220923T165000</dtend>
            <duration>0.05000</duration>
            <summary>Understanding everything your Django code is doing at runtime using Kolo</summary>
            <description>One of the most time consuming aspects of creating great software is reading and understanding the code we&#x27;re extending or building on top of. In fact, some say that for every 1 new line of code that we write, we first read and understand 10 other lines of code. Yet we seem to have few tools that really help us read, learn, and understand existing codebases.

This talk discusses how more often than not, we rely on our own imagination and brain power to understand and explore our codebases. We talk about where debuggers can be useful and the many places where they fall short and actually slow down our learning process.

We explore the inspection of runtime data and observing what our code is actually doing as a potential approach to speed up how quickly we can learn and understand a codebase. Specifically we look at all the information we can observe and visualise during a Django HTTP request/response cycle to help us understand everything that our code is doing.

Finally, we think about where else we could apply this idea of &quot;runtime inspection&quot; to solve other problems: Could this approach help us generate test cases? Or at least help us write test fixtures more quickly? Could it help us notice more quickly when our SQL queries are not efficient? And much more


**Outline**
1. The problem with reading and understanding code
2. Inspecting runtime data as a potential solution
3. Demo of Kolo: What can Kolo do today?
4. The Glorious Future of collecting, inspecting, and visualizing our code at runtime</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Workshop</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/RFFG3Z/</url>
            <location>Workshops</location>
            
            <attendee>Wilhelm Klopp</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>AFYRWB@@pretalx.evolutio.pt</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-AFYRWB</pentabarf:event-slug>
            <pentabarf:title>Automated Integration Testing and Live Documentation for your Django APIs with ScanAPI</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20220923T165500</dtstart>
            <dtend>20220923T174500</dtend>
            <duration>0.05000</duration>
            <summary>Automated Integration Testing and Live Documentation for your Django APIs with ScanAPI</summary>
            <description>One of the most common use cases of Django is to create REST APIs, especially using the Django REST framework. When creating APIs, we need to ensure the endpoints are working properly, as expected. To ensure they do, in fact, what they should do.

ScanAPI is an open-source Python library that was created to help in this task. ScanAPI provides an easy way to create integration tests for REST APIs via configuration files. Given an API specification, written by the user in YAML/JSON format, the library hits the specified endpoints, runs the test cases, and generates a detailed report of this execution - that can be also used as the API documentation itself.

After a short intro of what ScanAPI is and what was the motivation to create it (5 min), we go over the following topics

- Short Intro about the API we will test and document
- Setup - Installation + configure the project name
- Document and test the first endpoint
- How to use environment variables
- How to hide sensitive information in the reports
- How to chain requests
- How to use nested endpoints
- How to use default values
- How to split the specification file into multiple files
- Quick overview about how to use custom reports
- Quick overview about how to add ScanAPI to a pipeline

ScanAPI Links:

- GitHub Organization: https://github.com/scanapi
- Website: https://scanapi.dev
- Twitter: http://twitter.com/scanapi_</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Workshop</category>
            <url>https://pretalx.evolutio.pt//djangocon-europe-2022/talk/AFYRWB/</url>
            <location>Workshops</location>
            
            <attendee>Camila Maia</attendee>
            
        </vevent>
        
    </vcalendar>
</iCalendar>
